file = {
    SOI ~
    (schema | txn)* ~
    EOI
}

keyword = {
    "if" | "txn" | "cond" | "schema" | "else" | "fn" | "true" | "false" | "let" | "return"
}

txn = {
    "txn" ~ identifier ~ top_level_block
}

top_level_block = {
    "{" ~
    top_level_expression* ~
    expression? ~
    "}"
}

top_level_expression = {
    function_def | (expression ~ ";")
}

expression = {
    ("(" ~ expression ~ ")" |
    "{" ~ expression ~ "}" |
    literal_expression |
    if_expression |
    let_expression |
    apply_expression |
    cond_expression |
    return_expression |
    qualified_identifier) ~
    binary_operation?
}

return_expression = {
	"return" ~ expression ~ ";"
}

apply_expression = {
    qualified_identifier ~ "(" ~ (expression ~ ",")* ~ expression? ~ ")"
}

let_expression = {
    "let" ~ identifier ~ "=" ~ expression
}

literal_expression = {
    uint64 | bytes | boolean
}

qualified_identifier = {
    identifier ~ qualified_identifier_ext?
}

qualified_identifier_ext = {
    (("." ~ identifier) | ("[" ~ expression ~ "]")) ~ qualified_identifier_ext?
}

cond_expression = {
    "cond" ~ "{" ~
        (cond_arm ~ ",")* ~ cond_arm? ~
    "}" ~
    ("else" ~ "{" ~
        expression ~
    "}")?
}

cond_arm = {
    expression ~ "=>" ~ expression
}

binary_operation = {
    infix_operator ~ expression
}

infix_operator = {
    ";" | "==" | "=" | "!=" | ">" | ">=" | "<" | "<=" | "+" | "-" | "*" | "/" | "%" | "&&" | "||"
}

if_expression = {
    "if" ~ "(" ~ expression ~ ")" ~
        expression ~
    ("else" ~ expression)?
}

function_def = {
    "fn" ~ identifier ~ "(" ~ (optionally_typed_field ~ ",")* ~ optionally_typed_field? ~ ")" ~ type_signature? ~ "{" ~
        expression ~
    "}"
}

schema = {
    "schema" ~ identifier ~ struct_def
}

struct_def = {
    "{" ~
    (typed_field ~ ",")* ~
    typed_field? ~
    "}"
}

datatype = {
    "uint64" | "bytes"
}

typed_field = {
    identifier ~ type_signature
}

optionally_typed_field = {
    identifier ~ type_signature?
}

type_signature = {
    ":" ~ datatype
}

identifier = @{
    !keyword ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")*
}

uint64 = @{
    ASCII_DIGIT+
}

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

bytes = @{
    string
}

boolean = {
    "true" | "false"
}

WHITESPACE = _{ " " | "\t" | NEWLINE }
